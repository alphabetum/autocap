# this is where you define your mongrel clusters. 
# you need one of these blocks for each cluster
# and each one needs its own name to refer to it later.
upstream mongrel_<%= application %>_<%= stage %> {
  <% for port in mongrel_start_port..mongrel_end_port %>
  server 127.0.0.1:<%= port %>;
  <% end %>
}

# uncomment if you want to always redirect to www.
#server {
#  listen 80;
#  server_name exmaple.com;
#  rewrite ^.*$ http://www.example.com;
#}

# the server directive is nginx's virtual host directive.
server {
  # port to listen on. Can also be set to an IP:PORT
  listen 80;
  
  # Set the max size for file uploads to 50Mb
  client_max_body_size 50M;
  
  # sets the vhost_domain[s] that this vhost server requests for
  server_name <%= vhost_domain %> *.<%= vhost_domain %>;
  
  # no-www
  if ( $host = www.<%= vhost_domain %> ) {
    rewrite ^\/(.*)$ http://<%= vhost_domain %>/$1 permanent;
    break;
  }
  
  # always www
  #if ($host != www.<%= vhost_domain %>) {
  #  rewrite ^\/(.*)$ http://www.<%= vhost_domain %>$1 permanent;
  #  break;
  #}
  
  # doc root
  root <%= current_path %>/public;
  
  # vhost specific access log
  access_log  /var/log/nginx/nginx.<%= vhost_domain %>.access.log  main;
  
  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/maintenance.html) {
    rewrite  ^(.*)$  /maintenance.html last;
    break;
  }
  
  location / {
    index  index.html index.htm;
    # needed to forward user's IP address to rails
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect false;
    proxy_max_temp_file_size 0;
    
    #location ~ ^/(images|javascripts|stylesheets)/ {
    #  expires 10y;
    #}
    
    location ~ ^/(images|javascripts)/ {
      expires 10y;
    }
    
    if (-f $request_filename) { 
      break; 
    }
    
    
    # this is the meat of the rails page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end 
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the 
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }
    
    if (!-f $request_filename) {
      proxy_pass http://mongrel_<%= application %>_<%= stage %>;
      break;
    }
  }
  
  error_page   400 /400;
  error_page   500 502 503 504  /500.html;
  location = /500.html {
    root <%= current_path %>/public;
  }
  location = /400 {
      if ($lb) {
          access_log  off;
      }
      return 400;
  }
}
